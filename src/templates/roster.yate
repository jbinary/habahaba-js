external scalar get_avatar_uri(scalar)

func get_contact_jid(nodeset contact) {
    node = if contact.jid._node {
        "{ contact.jid._node }@"
    } else {
        ""
    }
    "{ node }{ contact.jid._domain }"
}

func get_contact_display(nodeset contact) {
    if contact.nick {
        "{ contact.nick }"
    } else {
        get_contact_jid(contact)
    }
}

func get_contact_status(nodeset contact) {
    presence = max_priority(contact.presences)
    if !presence || presence.type == 'unavailable' {
        "offline"
    } else {
        if presence.show {
            presence.show
        } else {
            "online"
        }
    }
}

key roster_item(.roster.items, .pk) { . }

match /.roster.items (nodeset group) {
    presence = max_priority(.presences)
    <div class="contact" id="contact-{ group.pk }-{ .pk }">
        @onclick = "habahaba.view.open_contact({ .pk }, true);"
        slideAnimation()
        jid = get_contact_jid(.)
        <div class="avatar">
            <img alt="contact ava" src="img/userpic.png">
                if .avatar_hash {
                    @src = get_avatar_uri(jid)
                }
            </img>
        </div>
        <span>
            @class = get_contact_status(.)
        </span>
        <h5>
        get_contact_display(.)
        </h5>
        <p>{ presence.status }</p>
    </div>
}

match /.roster.groups {
    group = .
    gpk = group.pk
    contacts = ..items[ .groups == gpk ]
    if exists(contacts) {
        <div class="group" id="group-{ gpk }">
            <div class="group-name">
                @onclick = (
                    "habahaba.view.collapse_group({ gpk });"
                )
                <h4>{ .name }</h4>
                overall = count(contacts)
                online = count(contacts[ .presences ][ exists(.presences[.type != 'unavailable']) ])
                <p>(<strong>{ online }</strong>/{ overall })</p>
            </div>
            if !exists(...view.collapsed_groups[.pk == gpk]) {
                <div class="group-list" id="group-list-{ gpk }">
                    slideAnimation()
                    sorted_contacts = sort(contacts, .nick)
                    apply sorted_contacts (group)
            </div>
            }
        </div>
    }
}

match .roster render_roster {
    <div class="border" id="block-size" >
        <div id="contact-block">
            <div id="container">
                <div id="search">
                    <input type="text"/>
                </div>
                <div id="roster">
                    apply sort(.groups, .name)
                </div>
                <div id="roster-buttons">
                    <button id="add-contact-button">Добавить контакт</button>
                    <button id="join-room-button">Войти в комнату</button>
                    <button id="settings-button"></button>
                </div>
            </div>
        </div>
    </div>
}
