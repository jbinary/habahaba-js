external scalar get_avatar_uri(scalar)
external nodeset icontains(nodeset, scalar)

func get_contact_jid(nodeset contact) {
    node = if contact.jid.node {
        "{ contact.jid.node }@"
    } else {
        ""
    }
    "{ node }{ contact.jid.domain }"
}

func get_contact_display(nodeset contact) {
    if contact.nick {
        "{ contact.nick }"
    } else {
        get_contact_jid(contact)
    }
}

func get_presence_status(nodeset presence) {
    if !presence || presence.type == 'unavailable' {
        "offline"
    } else {
        if presence.show {
            presence.show
        } else {
            "online"
        }
    }
}

func get_contact_status(nodeset contact) {
    presence = max_priority(contact.presences)
    get_presence_status(presence)
}

key roster_item(.roster.items, .pk) { . }

match /.roster.items (nodeset group) {
    presence = max_priority(.presences)
    <div class="contact" id="contact-{ group.pk }-{ .pk }">
        @onclick = "view.open_contact({ .pk }, true);"
        slideAnimation()
        jid = get_contact_jid(.)
        <div class="avatar">
            if .avatar_hash {
                @class += ' hash-' + .avatar_hash
            }
        </div>
        <span>
            if (.unread) {
                @class = "unread"
            } else {
                @class = get_contact_status(.)
            }
        </span>
        <h5>
        get_contact_display(.)
        </h5>
        <p>{ presence.status }</p>
    </div>
}

match /.roster.groups {
    group = .
    gpk = group.pk
    contacts = ..items[ .groups == gpk ]
    if exists(contacts) {
        online_contacts = contacts[ (.presences && exists(.presences[.type != 'unavailable'])) || .unread ]
        online = count(online_contacts)

        filter_string = /.view.roster_settings.search_string
        filtered = if (filter_string) {
            contacts[icontains(.nick, filter_string) || icontains(.jid.node, filter_string)]
        } else {
            contacts[false()]
        }

        is_group_visible = if (filter_string) {
            filtered
        } else {
            online || !/.view.roster_settings.hide_offline_users || group.special_group == 'not-in-roster'
        }

        if (is_group_visible) {
            <div class="group" id="group-{ gpk }">
                slideAnimation()
                <div class="group-name">
                    @onclick = (
                        "view.collapse_group({ gpk });"
                    )
                    <h4>{ .name }</h4>
                    overall = count(contacts)
                    <p>(<strong>{ online }</strong>/{ overall })</p>
                </div>
                if filter_string || !...view.roster_settings.collapsed_groups[. == group.name] {
                    <div class="group-list" id="group-list-{ gpk }">
                        slideAnimation()
                        to_show = if (filter_string) {
                            filtered
                        } else if (/.view.roster_settings.hide_offline_users && group.special_group != 'not-in-roster') {
                            online_contacts
                        } else {
                            contacts
                        }
                        apply sort(to_show, get_contact_display(.)) (group)
                    </div>
                }
            </div>
        }
    }
}

match .roster render_roster {
    <div class="border" id="block-size" >
        <div id="contact-block">
            <div id="container">
                <div id="search">
                    <input type="text" onkeydown="view.roster_search()">
                        @value = /.view.roster_settings.search_string
                        @id = "roster-search-input"
                    </input>
                </div>
                <div id="roster">
                    apply sort(.groups[!.hidden], .name)
                </div>
                <div id="roster-buttons">
                    /*<button id="add-contact-button">Добавить контакт</button>
                    <button id="join-room-button">Войти в комнату</button>*/
                    <button id="settings-button" contextmenu="roster-settings-button-menu">
                    @oncreate = :::
                        $.contextMenu({
                            selector: '#roster-buttons #settings-button',
                            items: $.contextMenu.fromMenu($('#roster-settings-button-menu')),
                            trigger: 'left',
                            events: {
                                show: function(opt) {
                                    if ($(this).data('_already_shown')) {
                                        $.contextMenu.setInputValues(opt, $(this).data());
                                    } else {
                                        $(this).data('_already_shown', true);
                                    }
                                },
                                hide: function(opt) {
                                    $.contextMenu.getInputValues(opt, $(this).data());
                                }
                            }
                        });
                    :::
                    </button>
                </div>
            </div>
        </div>
    </div>
    <menu id="roster-settings-button-menu" type="context">
        <command>
            @label = "Hide offline contacts"
            @type = "checkbox"
            if (/.view.roster_settings.hide_offline_users) {
                @checked = "checked"
            }
            @onclick = "view.toggle_hide_offline();"
        </command>
        <command>
            @label = "Show/collapse all groups"
            @onclick = "view.collapse_all_groups();"
        </command>
    </menu>
}
